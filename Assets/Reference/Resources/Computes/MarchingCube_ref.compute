// デバッグ時有効にすると逆コンパイル可能になる
// #pragma enable_d3d11_debug_symbols

#pragma kernel MarchingCubeCS
#pragma kernel SetRenderArgsCS

#include "./hash.hlsl"

// 構造化バッファの定義 --------------------------
struct Vertex {
    float4 position;
    float4 normal;
};

struct Triangle {
    Vertex vertexC;
    Vertex vertexB;
    Vertex vertexA;
};

// 生成したメッシュデータを格納するバッファ
AppendStructuredBuffer<Triangle> _TrianglesBuffer;
RWStructuredBuffer<int> _LutBuffer;
Texture3D _DensityMapTexture;
SamplerState linearClampSampler;

// 間接描画用のバッファ
RWStructuredBuffer<uint> _RenderArgsBuffer;

// 頂点IDバッファへのオフセット
static const int offsets[256] = {0, 0, 3, 6, 12, 15, 21, 27, 36, 39, 45, 51, 60, 66, 75, 84, 90, 93, 99, 105, 114, 120, 129, 138, 150, 156, 165, 174, 186, 195, 207, 219, 228, 231, 237, 243, 252, 258, 267, 276, 288, 294, 303, 312, 324, 333, 345, 357, 366, 372, 381, 390, 396, 405, 417, 429, 438, 447, 459, 471, 480, 492, 507, 522, 528, 531, 537, 543, 552, 558, 567, 576, 588, 594, 603, 612, 624, 633, 645, 657, 666, 672, 681, 690, 702, 711, 723, 735, 750, 759, 771, 783, 798, 810, 825, 840, 852, 858, 867, 876, 888, 897, 909, 915, 924, 933, 945, 957, 972, 984, 999, 1008, 1014, 1023, 1035, 1047, 1056, 1068, 1083, 1092, 1098, 1110, 1125, 1140, 1152, 1167, 1173, 1185, 1188, 1191, 1197, 1203, 1212, 1218, 1227, 1236, 1248, 1254, 1263, 1272, 1284, 1293, 1305, 1317, 1326, 1332, 1341, 1350, 1362, 1371, 1383, 1395, 1410, 1419, 1425, 1437, 1446, 1458, 1467, 1482, 1488, 1494, 1503, 1512, 1524, 1533, 1545, 1557, 1572, 1581, 1593, 1605, 1620, 1632, 1647, 1662, 1674, 1683, 1695, 1707, 1716, 1728, 1743, 1758, 1770, 1782, 1791, 1806, 1812, 1827, 1839, 1845, 1848, 1854, 1863, 1872, 1884, 1893, 1905, 1917, 1932, 1941, 1953, 1965, 1980, 1986, 1995, 2004, 2010, 2019, 2031, 2043, 2058, 2070, 2085, 2100, 2106, 2118, 2127, 2142, 2154, 2163, 2169, 2181, 2184, 2193, 2205, 2217, 2232, 2244, 2259, 2268, 2280, 2292, 2307, 2322, 2328, 2337, 2349, 2355, 2358, 2364, 2373, 2382, 2388, 2397, 2409, 2415, 2418, 2427, 2433, 2445, 2448, 2454, 2457, 2460};
// 256個のメッシュパターンの各場合の頂点数
static const int lengths[256] = {0, 3, 3, 6, 3, 6, 6, 9, 3, 6, 6, 9, 6, 9, 9, 6, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 6, 9, 9, 6, 9, 12, 12, 9, 9, 12, 12, 9, 12, 15, 15, 6, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 6, 9, 9, 12, 9, 12, 12, 15, 9, 12, 12, 15, 12, 15, 15, 12, 6, 9, 9, 12, 9, 12, 6, 9, 9, 12, 12, 15, 12, 15, 9, 6, 9, 12, 12, 9, 12, 15, 9, 6, 12, 15, 15, 12, 15, 6, 12, 3, 3, 6, 6, 9, 6, 9, 9, 12, 6, 9, 9, 12, 9, 12, 12, 9, 6, 9, 9, 12, 9, 12, 12, 15, 9, 6, 12, 9, 12, 9, 15, 6, 6, 9, 9, 12, 9, 12, 12, 15, 9, 12, 12, 15, 12, 15, 15, 12, 9, 12, 12, 9, 12, 15, 15, 12, 12, 9, 15, 6, 15, 12, 6, 3, 6, 9, 9, 12, 9, 12, 12, 15, 9, 12, 12, 15, 6, 9, 9, 6, 9, 12, 12, 15, 12, 15, 15, 6, 12, 9, 15, 12, 9, 6, 12, 3, 9, 12, 12, 15, 12, 15, 9, 12, 12, 15, 15, 6, 9, 12, 6, 3, 6, 9, 9, 6, 9, 12, 6, 3, 9, 6, 12, 3, 6, 3, 3, 0};

// 辺の始点の相対位置
static const int cornerIndexAFromEdge[12] = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3};
// 辺の終点の相対位置
static const int cornerIndexBFromEdge[12] = {1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7};

// シェーダ定数の定義 ----------------------------
cbuffer CB {
    uint3 _DensityMapSize;
    float _IsoLevel;
    float3 _Range;              // シミュレーション空間
};


//------------------------------------------------------------
// 密度場から密度をサンプリング
// -----------------------------------------------------------
float SampleDensity(uint3 GP_ID)
{
    bool isEdge = any(GP_ID <= 0 || GP_ID >= _DensityMapSize - 1);
    if (isEdge) return _IsoLevel;
    float3 uvw = (float3)GP_ID / (float3)(_DensityMapSize  - 1);
    return -_DensityMapTexture.SampleLevel(linearClampSampler, uvw, 0);
}

//------------------------------------------------------------
// 格子点のIDから
// -----------------------------------------------------------
float3 IDToWorld(uint3 corner_ID)
{
    return (float3)(corner_ID) / (float3)(_DensityMapSize - 1.0);
}

//------------------------------------------------------------
// 法線を計算
// -----------------------------------------------------------
float3 CalculateNormal(uint3 corner_ID)
{
    uint3 offsetX = uint3(1, 0, 0);
    uint3 offsetY = uint3(0, 1, 0);
    uint3 offsetZ = uint3(0, 0, 1);

    // 密度場の勾配が法線に対応
    // 密度の中心差分を計算
    float dx = SampleDensity(corner_ID + offsetX) - SampleDensity(corner_ID - offsetX);
    float dy = SampleDensity(corner_ID + offsetY) - SampleDensity(corner_ID - offsetY);
    float dz = SampleDensity(corner_ID + offsetZ) - SampleDensity(corner_ID - offsetZ);

    return normalize(float3(dx, dy, dz));
}

//------------------------------------------------------------
// 頂点座標，法線を補完して生成
// -----------------------------------------------------------
Vertex CreateVertex(uint3 corner_ID_A, uint3 corner_ID_B)
{
    float3 posA = IDToWorld(corner_ID_A);
    float3 posB = IDToWorld(corner_ID_B);
    float densityA = SampleDensity(corner_ID_A);
    float densityB = SampleDensity(corner_ID_B);

    float t = (_IsoLevel - densityA) / (densityB - densityA + 0.001f);
    float3 position = posA + t * (posB - posA);

    float3 normalA = CalculateNormal(corner_ID_A);
    float3 normalB = CalculateNormal(corner_ID_B);
    float3 normal = normalize(normalA + t * (normalB - normalA));

    Vertex vertex;
    vertex.position = float4(position * _Range, 1.0f);
    vertex.normal = float4(normal, 1.0f);
    return vertex;
}

//------------------------------------------------------------
// マーチングキューブ法
// -----------------------------------------------------------
[numthreads(8, 8, 8)]
void MarchingCubeCS(uint3 DTid : SV_DispatchThreadID)
{
    uint3 numCubesPerAxis = _DensityMapSize - 1;
    if (DTid.x >= numCubesPerAxis.x || DTid.y >= numCubesPerAxis.y || DTid.z >= numCubesPerAxis.z) {
        return;
    }

    // 左下の格子点のID
    uint3 GP_ID = DTid;
    
    // 注目しているセルを構成する8つの格子点のIDを計算
    uint3 corner_ID[8];
    corner_ID[0] = GP_ID + uint3(0, 0, 0);
    corner_ID[1] = GP_ID + uint3(1, 0, 0);
    corner_ID[2] = GP_ID + uint3(1, 0, 1);
    corner_ID[3] = GP_ID + uint3(0, 0, 1);
    corner_ID[4] = GP_ID + uint3(0, 1, 0);
    corner_ID[5] = GP_ID + uint3(1, 1, 0);
    corner_ID[6] = GP_ID + uint3(1, 1, 1);
    corner_ID[7] = GP_ID + uint3(0, 1, 1);

    // 密度場を参照し，対応するパターンのインデックスを取得
    int cubePatternID = 0;
    for (int i = 0; i < 8; i++) {
        if (SampleDensity(corner_ID[i]) < _IsoLevel) {
            cubePatternID |= (1 << i); // (1 << i) = 2 ^ i
        }
    }

    // 配列 頂点数(lengths)から
    // メッシュのインデックスの数を取得
    int numIndices = lengths[cubePatternID];
    // 配列 オフセット(offsets)から
    // 頂点IDバッファ(_LUTBuffer)の読み取り位置のオフセットを取得
    int offset = offsets[cubePatternID];

    for (int i = 0; i < numIndices; i+= 3) {
        // 三角形の頂点IDを頂点IDバッファ(_LUTBuffer)から取得
        int v0 = _LutBuffer[offset + i];
        int v1 = _LutBuffer[offset + 1 + i];
        int v2 = _LutBuffer[offset + 2 + i];

        int start0 = cornerIndexAFromEdge[v0];
        int end0 = cornerIndexBFromEdge[v0];

        int start1 = cornerIndexAFromEdge[v1];
        int end1 = cornerIndexBFromEdge[v1];

        int start2 = cornerIndexAFromEdge[v2];
        int end2 = cornerIndexBFromEdge[v2];

        Vertex vertexA = CreateVertex(corner_ID[start0], corner_ID[end0]);
        Vertex vertexB = CreateVertex(corner_ID[start1], corner_ID[end1]);
        Vertex vertexC = CreateVertex(corner_ID[start2], corner_ID[end2]);

        Triangle tri;
        tri.vertexA = vertexC;
        tri.vertexB = vertexB;
        tri.vertexC = vertexA;
        _TrianglesBuffer.Append(tri);
    }
}

//------------------------------------------------------------
// メッシュを間接描画するための引数を計算
// -----------------------------------------------------------
[numthreads(1, 1, 1)]
void SetRenderArgsCS(uint3 DTid : SV_DispatchThreadID)
{
    _RenderArgsBuffer[0] *= 3; // CPU側でコピーしたポリゴン数 * 3
    _RenderArgsBuffer[1] = 1;
    _RenderArgsBuffer[2] = 0;
    _RenderArgsBuffer[3] = 0;
    _RenderArgsBuffer[4] = 0;
}