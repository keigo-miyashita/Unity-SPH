// デバッグ時有効にすると逆コンパイル可能になる
// #pragma enable_d3d11_debug_symbols

#pragma kernel DensityCS
#pragma kernel PressureCompressibleCS
#pragma kernel PressureWeakCompressibleCS
#pragma kernel ForceCS
#pragma kernel IntegrateCS
#pragma kernel RegisterHashCS
#pragma kernel CalculateOffsetsCS
#pragma kernel DensityNeighborCS
#pragma kernel ForceNeighborCS
#pragma kernel DensityMapCS

#include "./hash.hlsl"

// 簡略化のためにスレッド数は1次元にしておく．
#define THREAD_SIZE_X 64

// 構造化バッファの定義 --------------------------
struct Particle {
    float4 position;
    float4 velocity;
};

struct ParticlePressure {
    float pressure;
};

struct ParticleForce {
    float4 acceleration;
};

struct ParticleDensity {
    float density;
};

struct Entry {
    uint P_ID;
    uint hash;
    uint key;
};

// 粒子位置と速度を保持するバッファ
StructuredBuffer    <Particle>          _ParticlesBufferRead;
RWStructuredBuffer  <Particle>          _ParticlesBufferWrite;

// 粒子密度を保持するバッファ    
StructuredBuffer    <ParticleDensity>   _ParticlesDensityBufferRead;
RWStructuredBuffer  <ParticleDensity>   _ParticlesDensityBufferWrite;

// 粒子圧力を保持するバッファ
StructuredBuffer    <ParticlePressure>  _ParticlesPressureBufferRead;
RWStructuredBuffer  <ParticlePressure>  _ParticlesPressureBufferWrite;

// 粒子加速度（力）を保持するバッファ
StructuredBuffer    <ParticleForce>     _ParticlesForceBufferRead;
RWStructuredBuffer  <ParticleForce>     _ParticlesForceBufferWrite;

// 粒子のキーを保持するバッファ
RWStructuredBuffer <Entry> _KeyBuffer;

// 各キーの領域を保持するルックアップテーブル
RWStructuredBuffer <uint> _LUTBuffer;

// 密度場を格納する3Dテクスチャ
RWTexture3D<float> _DensityMapTexure;

// シェーダ定数の定義 ----------------------------
cbuffer CB {
    uint    _NumParticles;       // 粒子数
    float  _TimeStep;           // 時間刻み幅 (dt)
    float  _Smoothlen;          // サポート半径
    float  _GasConstant;        // ガス定数
    float  _PressureStiffness;  // Tait 式の圧力定数
    float  _RestDensity;        // 静止密度
    float  _ParticleMass;       // 粒子の重さ
    float  _Poly6Coef;          // 密度算出時に使うpoly6カーネル関数の係数
    float  _SpikyCoef;          // 圧力算出時に使うspikyカーネル関数の係数
    float  _ViscosityCoef;      // 粘性算出時に使うviscosityカーネル関数の係数
    float  _WallStiffness;      // ペナルティ法の押し返す力
    float  _Viscosity;          // 粘性係数
    float3 _Gravity;            // 重力
    float3 _Range;              // シミュレーション空間
    uint3 _DensityMapSize;      // 各軸方向の格子点数

    float3 _MousePos;           // マウス位置
    float  _MouseRadius;        // マウスインタラクションの半径
    bool   _MouseDown;          // マウスが押されているか
};

// NOTE : 
/// Poly6 カーネルの実装
/// 参考：[Muller et al. 2003]
/// Muller et al.: Particle based fluid simulation for interactive applications, SCA, July 2003
/// https://dl.acm.org/doi/10.5555/846276.846298
inline float CalculateDensity(
    float r_sq // 粒子間距離の2乗．
) {
    const float h_sq = _Smoothlen * _Smoothlen;
    // return /*密度計算*/;
    return 0.0f; // エラー回避用．実装時に消す
}

// NOTE : 
/// 圧力方程式の実装．（非圧縮性を考慮しない）
inline float CalculateCompressiblePressure(
    float density // 密度
) {
    // return /*圧力計算*/;
    return 0.0f; // エラー回避用．実装時に消す
}

/// 微圧縮性の実装．（SPH は体積保存性が担保されない．これを改善するための手法）
/// Tait 方程式に基づき小さな密度揺らぎを許容することで，非圧縮性を担保するためのポアソン方程式（計算に時間がかかる）を使わずに堆積保存性を改善する． 
/// 参考：[Becker and Matthias 2007] Becker and Matthias: Weakly compressible SPH for free surface flows, SCA, July 2007
/// https://dl.acm.org/doi/10.5555/1272690.1272719
inline float CalculatePressure(
    float density // 密度
) {
    return _PressureStiffness * max(pow(density / _RestDensity, 7) - 1.0f, 0.0f);
}

// NOTE : 
/// Spiky カーネルの実装
/// 参考：[Muller et al. 2003]
inline float4 CalculateGradPressure(
    float r,            // 粒子間距離
    float P_pressure,   // 自分の粒子が保持している圧力
    float N_pressure,   // 相手の粒子が保持している圧力
    float N_density,    // 相手の粒子が保持している密度
    float4 diff         // 自分から相手へ向かうベクトル
) {
    const float h = _Smoothlen;
    // float avg_pressure =  /*平均圧力を計算*/;
    // return /*spikyカーネルの適用*/;
    return 0.0f; // エラー回避用．実装時に消す
}

// NOTE : 
/// Viscosity カーネルの実装
/// 参考：[Muller et al. 2003]
inline float4 CalculateLapViscosity(
    float r,            // 粒子間距離
    float4 P_velocity,  // 自分の粒子が保持している速度
    float4 N_velocity,  // 相手の粒子が保持している速度
    float N_density     // 相手の粒子が保持している密度
) {
    const float h = _Smoothlen;
    // float4 vel_diff = /*速度の差を計算 (注目粒子から近傍粒子の差) */;
    // return /*viscosityカーネルの適用*/;
    return 0.0f; // エラー回避用．実装時に消す
}


//-------------------------------------------------------
//密度の算出
//-------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void DensityCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }

    float h_sq = _Smoothlen * _Smoothlen;
    float4 P_position = _ParticlesBufferRead[P_ID].position;

    // 全探索 (O(n))
    float density = 0.0f;
    for (uint N_ID = 0; N_ID < _NumParticles; N_ID++) {
        float4 N_position = _ParticlesBufferRead[N_ID].position; // 近傍粒子の位置

        float4 diff = N_position - P_position;  // 自分から相手へ向かうベクトル
        float r_sq = dot(diff, diff);           // 粒子間距離の2乗

        // サポート半径内に収まっている粒子のみ計算．
        if (r_sq < h_sq) {
            density += CalculateDensity(r_sq);
        }
    }
    /*全粒子を探索しサポート半径以内の粒子のみを参照して密度計算*/

    // 密度バッファを更新
    _ParticlesDensityBufferWrite[P_ID].density = density;
}

//------------------------------------------------------------
// 圧力の算出（圧縮性）
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void PressureCompressibleCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }

    float P_density = _ParticlesDensityBufferRead[P_ID].density;
    float P_pressure = CalculateCompressiblePressure(P_density);

    // 圧力バッファを更新．
    _ParticlesPressureBufferWrite[P_ID].pressure = P_pressure;
}

//------------------------------------------------------------
// 圧力の算出（弱圧縮性）
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void PressureWeakCompressibleCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }

    float P_density = _ParticlesDensityBufferRead[P_ID].density;
    float P_pressure = CalculatePressure(P_density);

    // 圧力バッファを更新．
    _ParticlesPressureBufferWrite[P_ID].pressure = P_pressure;
}


//------------------------------------------------------------
// 力（加速度）の算出
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void ForceCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }

    const float4 P_position = _ParticlesBufferRead[P_ID].position;
    const float4 P_velocity = _ParticlesBufferRead[P_ID].velocity;
    const float  P_density = _ParticlesDensityBufferRead[P_ID].density;
    const float  P_pressure = _ParticlesPressureBufferRead[P_ID].pressure;

    const float h_sq = _Smoothlen * _Smoothlen;

    // 近傍探索 (O(n))
    float4 press = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float4 visco = float4(0.0f, 0.0f, 0.0f, 0.0f);
    for (uint N_ID = 0; N_ID < _NumParticles; N_ID++) {
        float4 N_position = _ParticlesBufferRead[N_ID].position; // 近傍粒子の位置

        float4 diff = N_position - P_position; // 処理している粒子から近傍粒子へのベクトル
        float r_sq = dot(diff, diff);

        if (r_sq < h_sq) {
            float N_density = _ParticlesDensityBufferRead[N_ID].density; // 近傍粒子の密度
            float N_pressure = _ParticlesPressureBufferRead[N_ID].pressure; // 近傍粒子の圧力
            float4 N_velocity = _ParticlesBufferRead[N_ID].velocity; // 近傍粒子の速度
            float r = sqrt(r_sq);

            // 圧力項
            press += CalculateGradPressure(r, P_pressure, N_pressure, N_density, -diff);

            // 粘性項
            visco += CalculateLapViscosity(r, P_velocity, N_velocity, N_density);
        }
    }

    // 統合
    float4 force = press + _Viscosity * visco;

    // 加速度バッファの更新
    _ParticlesForceBufferWrite[P_ID].acceleration = force / P_density;
}


//------------------------------------------------------------
// 衝突判定などを行って，位置を更新
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void IntegrateCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }

    // 更新前の位置と速度
    float4 position = _ParticlesBufferRead[P_ID].position;
    float4 velocity = _ParticlesBufferRead[P_ID].velocity;
    float4 acceleration = _ParticlesForceBufferRead[P_ID].acceleration;

    // マウスインタラクション
    if ((distance(float3(position.x, position.y, position.z), _MousePos) < _MouseRadius) && _MouseDown) {
        float4 dir = position - float4(_MousePos, 0.0f);
        float pushBack = _MouseRadius - length(dir);
        acceleration += 100.0f * pushBack * normalize(dir);
    }


    // 壁境界（ペナルティ法）
    float dist = dot(float4(position.x, position.y, position.z, 1.0f), float4(1.0f, 0.0f, 0.0f, 0.0f));
    acceleration += min(dist, 0.0f) * -_WallStiffness * float4(1.0f, 0.0f, 0.0f, 0.0f);

    dist = dot(float4(position.x, position.y, position.z, 1.0f), float4(0.0f, 1.0f, 0.0f, 0.0f));
    acceleration += min(dist, 0.0f) * -_WallStiffness * float4(0.0f, 1.0f, 0.0f, 0.0f);

    dist = dot(float4(position.x, position.y, position.z, 1.0f), float4(0.0f, 0.0f, 1.0f, 0.0f));
    acceleration += min(dist, 0.0f) * -_WallStiffness * float4(0.0f, 0.0f, 1.0f, 0.0f);

    dist = dot(float4(position.x, position.y, position.z, 1.0f), float4(-1.0f, 0.0f, 0.0f, _Range.x));
    acceleration += min(dist, 0.0f) * -_WallStiffness * float4(-1.0f, 0.0f, 0.0f, 0.0f);

    dist = dot(float4(position.x, position.y, position.z, 1.0f), float4(0.0f, -1.0f, 0.0f, _Range.y));
    acceleration += min(dist, 0.0f) * -_WallStiffness * float4(0.0f, -1.0f, 0.0f, 0.0f);

    dist = dot(float4(position.x, position.y, position.z, 1.0f), float4(0.0f, 0.0f, -1.0f, _Range.z));
    acceleration += min(dist, 0.0f) * -_WallStiffness * float4(0.0f, 0.0f, -1.0f, 0.0f);

    // 重力の計算
    acceleration += float4(_Gravity.x, _Gravity.y, _Gravity.z, 0.0f);

    // 前進オイラー法で次の粒子位置を更新
    velocity += _TimeStep * acceleration;
    position += _TimeStep * velocity;

    // 粒子のバッファ更新
    _ParticlesBufferWrite[P_ID].position = position;
    _ParticlesBufferWrite[P_ID].velocity = velocity;
}

//------------------------------------------------------------
// ハッシュ値をバッファに記録
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void RegisterHashCS(uint3 DTid : SV_DispatchThreadID)
{
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }
    
    _LUTBuffer[P_ID] = _NumParticles;
    int3 cell = GetCell(_ParticlesBufferRead[P_ID].position.xyz, _Smoothlen);
    uint hash = GetHash(cell);
    uint key = GetKey(hash, _NumParticles);

    _KeyBuffer[P_ID].P_ID = P_ID;
    _KeyBuffer[P_ID].hash = hash;
    _KeyBuffer[P_ID].key = key;
}

//------------------------------------------------------------
// ルックアップテーブルを作成
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void CalculateOffsetsCS(uint DTid : SV_DispatchThreadID)
{
    const uint i = DTid.x;       // 現在処理しているバッファのインデックス
    if (i >= _NumParticles) {
        return;
    }

    // 処理中のインデックスのキーを取得
    uint key = _KeyBuffer[i].key;
    // 処理中のインデックスの1つ前のキーを取得
    uint keyPrev = (i == 0) ? _NumParticles : _KeyBuffer[i - 1].key;
    
    // 現在のキー != 1つ前のキーならこのスレッドで処理しているインデックスが
    // 新たなセルに所属する領域の開始位置
    if (key != keyPrev) {
        _LUTBuffer[key] = i;
    }
}

//-------------------------------------------------------
//密度の算出（近傍探索）
//-------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void DensityNeighborCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }
    float h_sq = _Smoothlen * _Smoothlen;
    float4 P_position = _ParticlesBufferRead[P_ID].position;
    // 処理している粒子のセル，ハッシュ，キーを取得
    int3 cell = GetCell(P_position.xyz, _Smoothlen);
    uint hash = GetHash(cell);
    uint key = GetKey(hash, _NumParticles);

    /*_KeyBuffer*/
    // スライドの例
    // 粒子　　：0 1 4 8 9 5 2  3  5  7
    // ハッシュ：1 2 5 5 5 7 9 10 10 15
    // キー　　：1 2 5 5 5 7 9 10 10 15
    /*_LUTBuffer*/
    // スライドの例
    // キー  :0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
    // 開始ID:- 0 1 - - 2 - 5 - 6  7  -  -  -  -  9
    // 近傍探索 (O(1))
    float density = 0.0f;
    for (uint i = 0; i < 27; i++) { // 3Dでは周囲セルは27個
        int3 offset = offsets3D[i];                             // 注目セルから周囲セルへのオフセット
        int3 neighborCell = cell + offset;                      // 周囲セルID
        uint neighborHash = GetHash(neighborCell);              // 周囲セルからハッシュを取得
        uint neighborKey = GetKey(neighborHash, _NumParticles); // ハッシュからキーに変換
        uint currentIndex = _LUTBuffer[neighborKey];            // このループで処理するセルの開始インデックス

        while (currentIndex < _NumParticles) {
            Entry neighborEntry = _KeyBuffer[currentIndex]; // 粒子データ読み取り
            currentIndex++;
            if (neighborEntry.key != neighborKey) break;      // キーが異なる場合このセルの処理を終了
            if (neighborEntry.hash != neighborHash) continue; // ハッシュが異なる場合スキップ
            
            uint N_ID = neighborEntry.P_ID; // 周囲粒子ID
            float4 N_position = _ParticlesBufferRead[N_ID].position; // 周囲粒子位置

            float4 diff = N_position - P_position;  // 自分から相手へ向かうベクトル
            float r_sq = dot(diff, diff);           // 粒子間距離の2乗

            // サポート半径内に収まっている粒子のみ計算．
            if (r_sq < h_sq) {
                density += CalculateDensity(r_sq);
            }
        }
    }

    // 密度バッファを更新
    _ParticlesDensityBufferWrite[P_ID].density = density;
}

//------------------------------------------------------------
// 力（加速度）の算出（近傍探索）
// -----------------------------------------------------------
[numthreads(THREAD_SIZE_X, 1, 1)]
void ForceNeighborCS(uint3 DTid : SV_DispatchThreadID) {
    const uint P_ID = DTid.x;                 // 現在処理している粒子ID
    if (P_ID >= _NumParticles) {
        return;
    }

    const float4 P_position = _ParticlesBufferRead[P_ID].position;
    const float4 P_velocity = _ParticlesBufferRead[P_ID].velocity;
    const float  P_density = _ParticlesDensityBufferRead[P_ID].density;
    const float  P_pressure = _ParticlesPressureBufferRead[P_ID].pressure;

    const float h_sq = _Smoothlen * _Smoothlen;

    int3 cell = GetCell(P_position.xyz, _Smoothlen);
    uint hash = GetHash(cell);
    uint key = GetKey(hash, _NumParticles);

    // 近傍探索 (O(1))
    float4 press = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float4 visco = float4(0.0f, 0.0f, 0.0f, 0.0f);
    for (uint i = 0; i < 27; i++) {
        int3 offset = offsets3D[i];
        int3 neighborCell = cell + offset;
        uint neighborHash = GetHash(neighborCell);
        uint neighborKey = GetKey(neighborHash, _NumParticles);
        uint currentIndex = _LUTBuffer[neighborKey];

        while (currentIndex < _NumParticles) {
            Entry neighborEntry = _KeyBuffer[currentIndex];
            currentIndex++;
            if (neighborEntry.key != neighborKey) break;
            if (neighborEntry.hash != neighborHash) continue;
            
            uint N_ID = neighborEntry.P_ID;
            float4 N_position = _ParticlesBufferRead[N_ID].position;

            float4 diff = N_position - P_position;
            float r_sq = dot(diff, diff);

            if (r_sq < h_sq) {
                float N_density = _ParticlesDensityBufferRead[N_ID].density;
                float N_pressure = _ParticlesPressureBufferRead[N_ID].pressure;
                float4 N_velocity = _ParticlesBufferRead[N_ID].velocity;
                float r = sqrt(r_sq);

                // 圧力項
                press += CalculateGradPressure(r, P_pressure, N_pressure, N_density, -diff);

                // 粘性項
                visco += CalculateLapViscosity(r, P_velocity, N_velocity, N_density);
            }
        }
    }

    // 統合
    float4 force = press + _Viscosity * visco;

    // 加速度バッファの更新
    _ParticlesForceBufferWrite[P_ID].acceleration = force / P_density;
}

// 格子点上での密度を計算
float DensityAtGridPoint(float3 pos)
{
    float h_sq = _Smoothlen * _Smoothlen;

    int3 cell = GetCell(pos.xyz, _Smoothlen);
    uint hash = GetHash(cell);
    uint key = GetKey(hash, _NumParticles);

    // 近傍探索 (O(1))
    float density = 0.0f;
    for (uint i = 0; i < 27; i++) {
        int3 offset = offsets3D[i];
        int3 neighborCell = cell + offset;
        uint neighborHash = GetHash(neighborCell);
        uint neighborKey = GetKey(neighborHash, _NumParticles);
        uint currentIndex = _LUTBuffer[neighborKey];

        while (currentIndex < _NumParticles) {
            Entry neighborEntry = _KeyBuffer[currentIndex];
            currentIndex++;
            if (neighborEntry.key != neighborKey) break;
            if (neighborEntry.hash != neighborHash) continue;

            uint N_ID = neighborEntry.P_ID;
            float4 N_position = _ParticlesBufferRead[N_ID].position;

            float4 diff = N_position - float4(pos, 0.0);  // 自分から相手へ向かうベクトル
            float r_sq = dot(diff, diff);           // 粒子間距離の2乗
            // サポート半径内に収まっている粒子のみ計算．
            if (r_sq < h_sq) {
                density += CalculateDensity(r_sq);
            }
        }
    }

    return density;
}

//------------------------------------------------------------
// 密度場を計算
// -----------------------------------------------------------
[numthreads(8, 8, 8)]
void DensityMapCS(uint3 DTid : SV_DispatchThreadID)
{
    if (DTid.x >= _DensityMapSize.x || DTid.y >= _DensityMapSize.y || DTid.z >= _DensityMapSize.z) {
        return;
    }
    float3 texturePos = DTid / (_DensityMapSize - 1.0); // 正規化（各成分0.0f - 1.0f）
    float3 gridPointPos = (texturePos) * (_Range);      // シミュレーション空間全体を指すようにスケール
    _DensityMapTexure[DTid] = DensityAtGridPoint(gridPointPos);
}